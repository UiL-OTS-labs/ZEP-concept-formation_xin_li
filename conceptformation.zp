/******************************************************************************\
FILE:           ident_yn.zp
AUTHOR:         Theo Veenker (UiL-OTS) <T.J.G.Veenker@uu.nl>
ADAPTED BY:     -

EXPERIMENT:     Auditory Identification with Yes-No Response

DESCRIPTION:

Purpose of this experiment is to measure a participant's ability 
to identify (speech) sounds. For each trial a sound is presented. 
Participant's task is to jugdge whether a prespecified property is
present in the stimulus or not. Self-paced. Output: chosen value.


Global structure of experiment:

  - welcome

  - instructions

  - practice phase (... trials)
      trial

  - pause

  - test phase (... trials)
      trial

  - thankyou


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

requires 1.10;

import std_windows1;
import std_entry_page1;
import std_exit_page1;
import pause_page;
import std_blank_page;
import std_sound_output_device;

//change below to texts_cn to switch to chinese (simplified)
import texts_en;
//import texts_cn;
import participant;
import test_page;
import shuffle;

import test::task;

Experiment experiment
{

    //button box
    int[..] side_response_signal_map_BUTTONBOX;
    int[..] side_response_signal_map_KEYS;

    //control buttons
    string[..] side_button_map_description;
    Side DOMINANT_SIDE;
    ItemType SOUND_TYPE;

    on_event:entry()
    {
        set_up_side_variables();

        control.button_box.open();
        control.button_box.output(0x02); // If necessary set parallel port line D0 to power button box device (required on most new systems)
        control.button_box.enable_all_buttons(CONTINUE);
        
        if(check_participant_fields() != OK)
        {
            println("Error in participant record!");
            terminate;
        }
        show_test_windows();
    }

    void set_up_side_variables()
    {
        if(expdb.participant.get_enum_field("Handedness") == "right")
            experiment.DOMINANT_SIDE = RIGHT;
        else
            experiment.DOMINANT_SIDE = LEFT;

        experiment.side_response_signal_map_BUTTONBOX.size = 2;
        experiment.side_response_signal_map_KEYS.size = 2;
        if(experiment.DOMINANT_SIDE == RIGHT)
        {
            experiment.side_response_signal_map_BUTTONBOX[LEFT] = 0;
            experiment.side_response_signal_map_BUTTONBOX[RIGHT] = 1;
             experiment.side_response_signal_map_KEYS[LEFT] = 0;
            experiment.side_response_signal_map_KEYS[RIGHT] = 1;
        }
        else if(experiment.DOMINANT_SIDE == LEFT)
        {
            experiment.side_response_signal_map_BUTTONBOX[LEFT] = 0;
            experiment.side_response_signal_map_BUTTONBOX[RIGHT] = 1;
             experiment.side_response_signal_map_KEYS[LEFT] = 1;
            experiment.side_response_signal_map_KEYS[RIGHT] = 0;
            ctrl_window.show_error(BUTTON_BOX_LEFT_WARNING, true);
        }

        side_button_map_description.size = 2;
         if(experiment.DOMINANT_SIDE == RIGHT)
        {
            experiment.side_button_map_description[LEFT] = NO_BUTTON_TEXT;
            experiment.side_button_map_description[RIGHT] = YES_BUTTON_TEXT;
        }
        else if(experiment.DOMINANT_SIDE == LEFT)
        {
            experiment.side_button_map_description[LEFT] = YES_BUTTON_TEXT;
            experiment.side_button_map_description[RIGHT] = NO_BUTTON_TEXT;
        }
    }

    Part welcome
    {
        on_event:entry()
        {
            entry_page.set_text(WELCOME_TEXT);
            entry_page.action(this, 0s);
        }
    }

     Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part part1
    {
        on_event:entry()
        {
            SOUND_TYPE = GROUP_ORDER[selected_group][0];
            test::action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

     Part instructions_middle
    {
        on_event:entry()
        {
            pause_page.set_text(INSTRUCTION_MIDDLE, true);

            pause_page.action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

     Part part2
    {
        on_event:entry()
        {
            SOUND_TYPE = GROUP_ORDER[selected_group][1];
            test::action(this);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms, 500ms);
        }
    }

    Part thankyou
    {
        on_event:entry()
        {
            control.end_experiment();   // Check-in session.

            pause_page.set_text(THANK_YOU_TEXT);
            pause_page.action(this);
        }
    }
}
