

Block task
{
    Trial 
    {
        SubTrial instructions
        {
            on_event:entry()
            {
        //            pause_page.set_text_size(1000, 600);
                pause_page.set_text(INSTRUCTION_TEXT, true);

                pause_page.action(this);
            }
        }

        SubTrial instructions2
        {
            on_event:entry()
            {
            //            pause_page.set_text_size(1000, 600);
                pause_page.set_text(INSTRUCTION_TEXT2, true);

                pause_page.action(this, 0s, -1s, -1s, true, true);
            }
        }

        TransientPart backCheck
        {
            on_event:entry()
            {
                 if(pause_page.back_button_was_pressed)
                    instructions.enter();
            }
        }
    }
    

     Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Block practice
    {
        TestItem        item;   // current item
        bool[..]         window;

        on_event:entry()
        {
            trial.setup();

            if(shuffle_test_prac_items() != OK)
            {
                println("ERROR: could not shuffle test_prac_items!");
                terminate;
            }

            window.size = 0;
            num_cycles = test_prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(-1, true);
        }


        on_event:exit()
        {
            test_page.cleanup();
            test_output_save(2);
        }


        Trial trial
        {
            bool repeat_flag;

             void setup()
             {
                repeat_flag = false;
             }

            on_event:entry()
            {
                if(repeat_flag)
                {
                    practice.cycle = 0;
                    repeat_flag = false;
                }
                item = test_prac_items[practice.cycle];
                test_page.action(this, item, reference_time, practice.cycle);
            }
            
            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = practice.cycle + 1;
                output.id = item.id;
                output.type = experiment.SOUND_TYPE;
                output.stimulus_soundfile = item.sndfn_stimulus;
                output.feedback_soundfile = test_page.response.correct ? item.sndfn_feedback_correct : item.sndfn_feedback_incorrect;
                output.expected_value = item.expected_answer;
                output.value = test_page.response.value;
                output.correct = test_page.response.correct;
                output.rt = test_page.response.rt;
                test_output_append(output);

                shift_and_add_to_window(test_page.response.correct);

                if(allowed_to_continue()) //beyond the minimum and low enough number of errors...
                    finish_block();
                else if(practice.cycle == practice.num_cycles-1) // at the end of the practice round...
                    reset_block();
            }
        }

        bool allowed_to_continue()
        {
            int number_of_errors = count_number_of_errors_in_window();
            return window.size >= CORRECT_WINDOW_SIZE && number_of_errors <= MAX_NUMBER_ERROR_IN_WINDOW;
        }

        void shift_and_add_to_window(bool addition_item)
        {
                 if(window.size < CORRECT_WINDOW_SIZE)
                 {
                    window.size = window.size+1;
                 }
                 else
                 {
                     int index = 0;
                    while(index < window.size-1)
                    {
                        window[index] = window[index+1];
                        index++;
                    }
                 }               
                window[window.size-1] = addition_item;
        }

        int count_number_of_errors_in_window()
        {
             // count the errors, inefficient but easy to read.
                int j = 0;
                int errors=0;
                while(j < window.size)
                {
                    if(!window[j])
                        errors++;
                    j++;
                }
                return errors;
        }

        void finish_block()
        {
            println("FINISHED BLOCK");
            practice.num_cycles = practice.cycle+1;
        }

        void reset_block()
        {
            trial.repeat_flag = true;
            practice.cycle = 0;
        } 
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }

    Part pause
    {
        on_event:entry()
        {
            pause_page.set_text(AFTER_PRACTICE_TEXT, true);

            pause_page.action(this);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            temp_test_items.size = 0;
            deep_copy_from_to(test_items, temp_test_items); // 

            // Randomize test items table.
            temp_test_items.shuffle(0,-1);

            num_cycles = temp_test_items.size;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, true);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test phase output table as CSV file.
            test_output_save(1);
        }


        Trial trial
        {
            on_event:entry()
            {
                item = temp_test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum = test.cycle + 1;
                output.id = item.id;
                output.type = experiment.SOUND_TYPE;
                output.stimulus_soundfile = item.sndfn_stimulus;
                output.feedback_soundfile = test_page.response.correct ? item.sndfn_feedback_correct : item.sndfn_feedback_incorrect;
                output.expected_value = item.expected_answer;
                output.value = test_page.response.value;
                output.correct = test_page.response.correct;
                output.rt = test_page.response.rt;
                test_output_append(output);

                if(!test_page.response.a_response_was_given())
                    add_item_to_temp_test_items();
            }
        }

        void add_item_to_temp_test_items()
        {
            temp_test_items.size = temp_test_items.size+1;
            temp_test_items[temp_test_items.size-1] = item;
            test.num_cycles = test.num_cycles+1;

            test_page_overlay.show_progress_bar(test.num_cycles); 
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
